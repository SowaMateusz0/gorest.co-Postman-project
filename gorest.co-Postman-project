{
	"info": {
		"_postman_id": "a4998f0a-c764-4f35-9023-d14aa61f0b69",
		"name": "gorest.co.in",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22923812"
	},
	"item": [
		{
			"name": "Create user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let random = Math.floor(Math.random() * (1000000 - 1) + 1);\r",
							"\r",
							"let name = \"testName\" + random;\r",
							"let email = \"testEmail\" + random+\"@gmail.com\";\r",
							"\r",
							"pm.environment.set(\"name\", name);\r",
							"pm.environment.set(\"email\", email);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"userId\", jsonData.id);\r",
							"\r",
							"\r",
							"pm.test(\"Should verify response id\", () =>{\r",
							"    \r",
							"    const userId = pm.environment.get(\"userId\");\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.id).to.eql(userId);\r",
							"});\r",
							"\r",
							"pm.test(\"Should verify response name\", () =>{\r",
							"    \r",
							"    const userId = pm.environment.get(\"name\");\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.name).to.eql(userId);\r",
							"});\r",
							"\r",
							"pm.test(\"Should verify response email\", () =>{\r",
							"    \r",
							"    const userId = pm.environment.get(\"email\");\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.email).to.eql(userId);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "9086b97a44802ef2d993139bec6067a044391e18a025838ca7627956319e3bbd",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"{{email}}\",\r\n    \"status\": \"inactive\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/public/v2/users",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"public",
						"v2",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Should verify response id\", () =>{\r",
							"    \r",
							"    const userId = pm.environment.get(\"userId\");\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.id).to.eql(userId);\r",
							"});\r",
							"\r",
							"pm.test(\"Should verify response name\", () =>{\r",
							"    \r",
							"    const userId = pm.environment.get(\"name\");\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.name).to.eql(userId);\r",
							"});\r",
							"\r",
							"pm.test(\"Should verify response email\", () =>{\r",
							"    \r",
							"    const userId = pm.environment.get(\"email\");\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.email).to.eql(userId);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/public/v2/users/{{userId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let random = Math.floor(Math.random() * (1000000 - 1) + 1);\r",
							"\r",
							"let name = \"updatedUser\" + random;\r",
							"let email = \"updatedEmail\" +random+\"@gmail.com\";\r",
							"\r",
							"pm.environment.set(\"name\", name);\r",
							"pm.environment.set(\"email\", email);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Should verify response id\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    const userId = pm.environment.get(\"userId\");\r",
							"\r",
							"    pm.expect(jsonData.id,userId);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"{{email}}\",\r\n    \"status\": \"inactive\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/public/v2/users/{{userId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response time is less than 300ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.environment.unset(\"userId\");\r",
							"pm.environment.unset(\"name\");\r",
							"pm.environment.unset(\"email\");\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/public/v2/users/{{userId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "9086b97a44802ef2d993139bec6067a044391e18a025838ca7627956319e3bbd",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": " https://gorest.co.in",
			"type": "string"
		}
	]
}